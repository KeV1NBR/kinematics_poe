#include <ATen/Context.h>
#include <ATen/core/TensorBody.h>
#include <ATen/ops/linalg_matrix_exp.h>
#include <torch/cuda.h>

#include <ctime>
#include <iostream>

#include "torch/torch.h"

using namespace std;

int main() {
    std::cout << torch::cuda::is_available() << endl;

    for (int i = 0; i < 10; i++) {
        torch::Tensor tensor = torch::rand({2, 2}).cuda();
        tensor.matrix_exp();
    }

    clock_t now = clock();
    for (int i = 0; i < 1000; i++) {
        torch::Tensor t = torch::tensor({{0., 0., 1., -0.1625},
                                         {0., 0., 0., 0.},
                                         {-1., 0., 0., 0.},
                                         {0., 0., 0., 0.}})
                              .cuda();
        torch::Tensor theta = torch::tensor(M_PI / 2).cuda();
        t = t * theta;
        t.matrix_exp();
        // torch::Tensor ht =
        //    torch::tensor(
        //        {{cos(theta), 0., sin(theta), -0.1625 * sin(theta)},
        //         {0., 1., 0., 0.},
        //         {-sin(theta), 0., cos(theta), 0.1625 * (1 - cos(theta))},
        //         {0., 0., 0., 1.}})
        //        .cuda();
    }
    clock_t end = clock();
    //    std::cout << tensor << std::endl;
    cout << double(end - now) / CLOCKS_PER_SEC << endl;

    // torch::Tensor ht =
    //    torch::tensor({{cos(theta), 0., sin(theta), -0.1625 * sin(theta)},
    //                   {0., 1., 0., 0.},
    //                   {-sin(theta), 0., cos(theta), 0.1625 * (1 -
    //                   cos(theta))}, {0., 0., 0., 1.}});

    // cout << ht;
    return 0;
}
